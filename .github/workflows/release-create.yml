name: "Release: Create"

on:
  workflow_dispatch:
    inputs:
      prs:
        description: 'Pull Requests to Merge (comma separated list)'
        required: true

jobs:
  release-create:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Create Branch Name
        uses: actions/github-script@v6
        id: CreateBranchRelease
        with:
          script: |
            const release = require('./.github/workflows/release.js');
            return release.getBranchName();

      - name: Create Release Branch
        run: |
          git checkout -b ${{ steps.CreateBranchRelease.outputs.result }} main
          git push origin ${{ steps.CreateBranchRelease.outputs.result }} -f

      - name: Update/Create and Merge PRs
        uses: actions/github-script@v6
        id: MergePRs
        with:
          script: |
            const { repo, owner } = context.repo;
            const release = require('./.github/workflows/release.js');
            const pullRequestIDs = "${{ github.event.inputs.prs }}".split(',').map(pr => pr.trim());
            const prs = [];

            for (const id of pullRequestIDs) {
              let number;
              console.log('ID: ' + id);

              try {
                const pull = await github.rest.pulls.get({
                  owner,
                  repo,
                  pull_number: id,
                });

                if (pull.data.state === 'open') {
                  await github.rest.pulls.update({
                    owner,
                    repo,
                    base: release.getBranchName(),
                    pull_number: id,
                  });

                  number = pull.data.number;
                  prs.push({
                    jiraCard: release.getJiraCardNumber(pull.data.title),
                    prAuthor: pull.data.assignees.map(assignee => assignee.login),
                    prNumber: pull.data.number,
                    prTitle: pull.data.title,
                  });
                } else {
                  const pullCreated = await github.rest.pulls.create({
                    owner,
                    repo,
                    base: release.getBranchName(),
                    head: pull.data.head.ref,
                    title: pull.data.title,
                    body: pull.data.body,
                  });

                  number = pullCreated.data.number;
                  prs.push({
                    jiraCard: release.getJiraCardNumber(pullCreated.data.title),
                    prAuthor: pull.data.assignees.map(assignee => assignee.login),
                    prNumber: pullCreated.data.number,
                    prTitle: pullCreated.data.title,
                  });
                }

                await github.rest.pulls.merge({
                  owner,
                  repo,
                  pull_number: number,
                  merge_method: "squash",
                  sha: pull.data.head.sha,
                });
              } catch (error) {
                console.log('Error: ' + id);
                console.log(error);
              }
            }

            return prs;

      - name: Create Release Description
        uses: actions/github-script@v6
        id: CreateReleaseDescription
        with:
          script: |
            const release = require('./.github/workflows/release.js');
            const prs = ${{ steps.MergePRs.outputs.result }};
            return release.createPullRequestDescription(prs);

      - name: Create Release PR
        uses: actions/github-script@v6
        id: CreateReleasePR
        with:
          script: |
            const { repo, owner } = context.repo;
            const release = require('./.github/workflows/release.js');

            try {
              const pull = await github.rest.pulls.create({
                owner,
                repo,
                title: release.getPullRequestTitle(),
                head: release.getBranchName(),
                base: 'main',
                body: ${{ steps.CreateReleaseDescription.outputs.result }},
              });

              core.setOutput('version', release.getNumber());
              core.setOutput('link', pull.data.html_url);
            } catch (error) {
              console.log(error);
            }

#      - name: Send Slack message
#        uses: slackapi/slack-github-action@v1.24.0
#        with:
#          payload: |
#            {
#              "version": "${{ steps.CreateReleasePR.outputs.version }}",
#              "link": "${{ steps.CreateReleasePR.outputs.link }}"
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
