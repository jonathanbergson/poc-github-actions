name: "Release: Create"

on:
  workflow_dispatch:
    inputs:
      prs:
        description: 'Pull Requests to Merge (comma separated list)'
        required: true

jobs:
  release-create:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Create Version
        uses: actions/github-script@v6
        id: releaseName
        with:
          script: |
            const currentDate = new Date()
            const year = currentDate.getFullYear().toString().slice(2)
            const month = currentDate.getMonth() + 1
            const date = currentDate.getDate()
            const version = year + '.' + month + '.' + date
            return `release/v${version}`

      - name: Create Release Branch
        run: |
          git checkout -b release/v${{ fromJSON(steps.releaseName.outputs.result) }} main
          git push origin release/v${{ fromJSON(steps.releaseName.outputs.result) }}

      - name: Update and Create PRs
        uses: actions/github-script@v6
        id: releasePRs
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const prs = "${{ github.event.inputs.prs }}".split(',').map(pr => pr.trim());
            const branchRelease = "${{ fromJSON(steps.releaseName.outputs.result) }}";
            const releasePRs = [];

            for (const pullNumber of prs) {
              try {
                const pull = await github.rest.pulls.get({
                  owner,
                  repo,
                  pull_number: pullNumber,
                });

                if (pull.data.state === 'open') {
                  await github.rest.pulls.update({
                    base: branchRelease,
                    pull_number: pullNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  });

                  releasePRs.push({
                    title: pull.data.title,
                    number: pullNumber,
                  });
                } else {
                  const pullCreated = await github.rest.pulls.create({
                    title: pull.data.title,
                    owner,
                    repo,
                    head: pull.data.head.ref,
                    base: branchRelease,
                    body: pull.data.body,
                  });

                  releasePRs.push({
                    title: pullCreated.data.title,
                    number: pullCreated.data.number,
                  });
                }
              } catch (error) {
                console.log(error);
                continue;
              }
            }

            return JSON.stringify(releasePRs);

      - name: Merge PRs into Release Branch
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { repo, owner } = context.repo;
            const releasePRs = JSON.parse("${{ steps.releasePRs.outputs.result }}");


            for (const pr of releasePRs) {
              console.log(typeof pr);

              try {
                await github.rest.pulls.merge({
                  owner,
                  repo,
                  pull_number: pr.number,
                  merge_method: "squash"
                });
              } catch (error) {
                console.log(error);
                continue;
              }
            }

      - name: Create Release PR
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const branchRelease = "${{ fromJSON(steps.release.outputs.result) }}";

            try {
              await github.rest.pulls.create({
                owner,
                repo,
                title: "release | v24.1.22",
                head: branchRelease,
                base: "main",
                body: `This PR includes merged demands:\n\n${{ github.event.inputs.prs }}`
              });
            } catch (error) {
              console.log(error);
            }
